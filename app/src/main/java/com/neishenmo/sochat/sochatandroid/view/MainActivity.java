package com.neishenmo.sochat.sochatandroid.view;import android.Manifest;import android.app.AppOpsManager;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.Rect;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.provider.Settings;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.annotation.UiThread;import android.support.v4.app.ActivityCompat;import android.support.v4.app.AppOpsManagerCompat;import android.support.v4.content.ContextCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Editable;import android.text.TextWatcher;import android.util.DisplayMetrics;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.bumptech.glide.Glide;import com.bumptech.glide.RequestManager;import com.neishenmo.sochat.sochatandroid.R;import com.neishenmo.sochat.sochatandroid.adapter.HomeAdapter;import com.neishenmo.sochat.sochatandroid.adapter.HomeOthersMessageAdapter;import com.neishenmo.sochat.sochatandroid.base.BaseActivity;import com.neishenmo.sochat.sochatandroid.bean.ApilyLogin;import com.neishenmo.sochat.sochatandroid.bean.HomeOthers;import com.neishenmo.sochat.sochatandroid.bean.LogOut;import com.neishenmo.sochat.sochatandroid.net.RetrofitHelper;import com.neishenmo.sochat.sochatandroid.net.ServiceApi;import com.neishenmo.sochat.sochatandroid.requestbean.HomeRequst;import com.neishenmo.sochat.sochatandroid.requestbean.RelationShipRequest;import com.neishenmo.sochat.sochatandroid.requestbean.SetName;import com.neishenmo.sochat.sochatandroid.utils.DlgUtils;import com.neishenmo.sochat.sochatandroid.utils.GlideCircleTransform;import com.neishenmo.sochat.sochatandroid.utils.PermissionPageUtils;import com.neishenmo.sochat.sochatandroid.utils.StringUtils;import com.neishenmo.sochat.sochatandroid.view.particular.ParticularActivity;import com.neishenmo.sochat.sochatandroid.view.personage.PailyUtils;import com.neishenmo.sochat.sochatandroid.view.personage.PersonageFragment;import com.neishenmo.sochat.sochatandroid.view.personage.WeiXinSendActivity;import com.neishenmo.sochat.sochatandroid.view.signin.SplaActivity;import com.tsy.sdk.social.PlatformConfig;import com.tsy.sdk.social.PlatformType;import com.tsy.sdk.social.SocialApi;import com.tsy.sdk.social.listener.AuthListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import bpwidget.lib.wjj.blurpopupwindowlib.tools.FastBlur;import bpwidget.lib.wjj.blurpopupwindowlib.widget.BlurPopWin;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;import pub.devrel.easypermissions.EasyPermissions;/** * MainActivity入口,进行fragment的加载 */public class MainActivity extends BaseActivity {    private MyLocationListener myListener = new MyLocationListener();    public LocationClient mLocationClient = null;    private LocationClientOption option;    private SharedPreferences user;    private DrawerLayout drawer;    private int BAIDU_READ_PHONE_STATE = 11;    private double latitude;    private double longitude;    private String address;    private RadioGroup sidesLipe;    private RadioButton person;    private RadioButton apliy;    private RadioButton more;    //页面标识    private int page = 0;    /**     * 保存MyTouchListener接口的列表     */    private ArrayList<MyTouchListener> myTouchListeners = new ArrayList<>();    private Map<String, String> map = new HashMap<>();    private GetLocationData getLocationData;    public static String[] permissionsREAD = {            Manifest.permission.ACCESS_FINE_LOCATION,    };    private ImageView mPersonHead;    /**     * 姓名     */    private TextView mPersonName;    /**     * 日期     */    private TextView mPersonTime;    private LinearLayout mPersonMore;    private ImageView mApilyAnt;    private ImageView mApilyWeixin;    private LinearLayout mApilyMore;    private ImageView mTrash;    private ImageView mExits;    private LinearLayout mMores;    private LinearLayout mLeft;    private DrawerLayout mDrawer;    private ServiceApi serviceApi;    //首页请求参数    private HomeRequst request;    //退出账号请求参数    RelationShipRequest exitRequest;//圆形glide加载图片private RequestManager with;//首页列表    private ImageView mDaTou;    private TextView mHeadName;    private TextView mHeafDistance;    private RecyclerView mRc;    private List<HomeOthers.DataBean.OnlineUserListBean> list ;//提现列表    //支付宝提现    private EditText importMoney;    private TextView balance;    private String orderInfo;//微信提现private String code;    private SocialApi mSocialApi;    private String s;    private static final String WX_APPID = "wx143deeda4d112579";    private static final int REQUEST_LOCATION = 1;    public interface GetLocationData {        public void getData(String lon, String lat, String address, BDLocation location);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // SDKInitializer.initialize(getApplicationContext());        setContentView(R.layout.activity_main);        user = getSharedPreferences("user", 0);        serviceApi = RetrofitHelper.getServiceApi();        //权限获取        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE}, BAIDU_READ_PHONE_STATE);        if(user.getString("token","").equals(""))        {            Intent intent = new Intent(MainActivity.this, SplaActivity.class);            SharedPreferences.Editor editor = user.edit();            editor.clear();            startActivity(intent);            return;        }        //调用定位方法        location();        with = Glide.with(this);        //初始化方法        initView();        //设置侧滑栏个人信息        setPersonData();    }    private void initView() {        //获取控件id        drawer = findViewById(R.id.drawer);        sidesLipe = findViewById(R.id.sideslipe);        person = findViewById(R.id.person);        apliy = findViewById(R.id.apliy);        more = findViewById(R.id.more);        mPersonHead = (ImageView) findViewById(R.id.person_head);        mPersonName = (TextView) findViewById(R.id.person_name);        mPersonTime = (TextView) findViewById(R.id.person_time);        mPersonMore = (LinearLayout) findViewById(R.id.person_more);        mApilyAnt = (ImageView) findViewById(R.id.apily_ant);        mApilyWeixin = (ImageView) findViewById(R.id.apily_weixin);        mApilyMore = (LinearLayout) findViewById(R.id.apily_more);        mTrash = (ImageView) findViewById(R.id.trash);        mExits = (ImageView) findViewById(R.id.exits);        mMores = (LinearLayout) findViewById(R.id.mores);        mLeft = (LinearLayout) findViewById(R.id.left);        mDrawer = (DrawerLayout) findViewById(R.id.drawer);        mDaTou = (ImageView) findViewById(R.id.da_tou);        mRc = (RecyclerView) findViewById(R.id.rc);        mHeadName =  findViewById(R.id.head_name);        mHeafDistance =  findViewById(R.id.head_distance);        importMoney =  findViewById(R.id.import_money);        balance =  findViewById(R.id.balance);        //注册微信授权        PlatformConfig.setWeixin(WX_APPID);        mSocialApi = SocialApi.get(this.getApplicationContext());        //将drawerLayout设置成占满主布局        DisplayMetrics metric = new DisplayMetrics();        getWindowManager().getDefaultDisplay().getMetrics(metric);        int windowsWight = metric.widthPixels;        int windowsHeight = metric.heightPixels;        View leftMenu = findViewById(R.id.left);        ViewGroup.LayoutParams leftParams = leftMenu.getLayoutParams();        leftParams.height = windowsHeight;        leftParams.width = windowsWight;        leftMenu.setLayoutParams(leftParams);        //调用输入框设置        setInput();//        //drawerLayout监听//        drawer.addDrawerListener(new DrawerLayout.DrawerListener() {//            @Override//            public void onDrawerSlide(@NonNull View drawerView, float slideOffset) {//                //滑动过程中不断回调 slideOffset:0~1//                View content = drawer.getChildAt(0);//                View menu = drawerView;////                float scale = 1 - slideOffset;//1~0//                content.setTranslationX(menu.getMeasuredWidth() * (1 - scale));//0~width//            }////            @Override//            public void onDrawerOpened(@NonNull View drawerView) {//                //RadioGroup设定默认选项//                sidesLipe.check(R.id.person);//            }////            @Override//            public void onDrawerClosed(@NonNull View drawerView) {////            }////            @Override//            public void onDrawerStateChanged(int newState) {////            }//        });        sidesLipe.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(RadioGroup radioGroup, int i) {                switch (i) {                    //选中个人中心                    case R.id.person:                        mPersonMore.setVisibility(View.VISIBLE);                        mApilyMore.setVisibility(View.GONE);                        mMores.setVisibility(View.GONE);                        break;                    //选中支付                    case R.id.apliy:                        mPersonMore.setVisibility(View.GONE);                        mApilyMore.setVisibility(View.VISIBLE);                        mMores.setVisibility(View.GONE);                        break;                    //选中更多                    case R.id.more:                        mPersonMore.setVisibility(View.GONE);                        mApilyMore.setVisibility(View.GONE);                        mMores.setVisibility(View.VISIBLE);                        break;                }            }        });        exitRequest = new RelationShipRequest("1", user.getString("token", ""));        //退出登录弹框        mExits.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                new BlurPopWin.Builder(MainActivity.this).setContent("退出后,账号信息会消失哦!")                        //Radius越大耗时越长,被图片处理图像越模糊                        .setRadius(3).setTitle("确定退出?")                        //设置居中还是底部显示                        .setshowAtLocationType(0)                        .onClick(new BlurPopWin.PopupCallback() {                            @Override                            public void onCancelClick(@NonNull BlurPopWin blurPopWin) {                                blurPopWin.dismiss();                            }                            @Override                            public void onAffirmClick(@NonNull BlurPopWin blurPopWin) {                                exitUser();                                blurPopWin.dismiss();                            }                        }).show(mExits);            }        });     //支付宝提现        final PailyUtils pailyUtils = new PailyUtils();        final SetName rqe = new SetName();        rqe.setToken(user.getString("token", ""));        mApilyAnt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {               String money = importMoney.getText().toString().trim();                serviceApi.apilyLogin(rqe).subscribeOn(Schedulers.io())                        .observeOn(AndroidSchedulers.mainThread())                        .subscribe(new Consumer<ApilyLogin>() {                            @Override                            public void accept(ApilyLogin apilyLogin) throws Exception {                                orderInfo = apilyLogin.getData();                            }                        }, new Consumer<Throwable>() {                            @Override                            public void accept(Throwable throwable) throws Exception {                            }                        });                pailyUtils.setActivity(MainActivity.this, money);                if (money != null & !money.equals("")) {                    pailyUtils.pay(orderInfo);                } else {                    Toast.makeText(MainActivity.this, "请输入提现数量", Toast.LENGTH_SHORT).show();                }            }        });        //微信提现        mApilyWeixin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {              s = importMoney.getText().toString().trim();                //WXEntryActivity.loginWeixin(getActivity(), NeiShenMeApp.sApi);                if (s != null & !s.equals("")) {                    mSocialApi.doOauthVerify(MainActivity.this, PlatformType.WEIXIN , new MyAuthListener());                } else {                    Toast.makeText(MainActivity.this, "请输入提现数量", Toast.LENGTH_SHORT).show();                }            }        });    }    //调用百度定位获取经纬度    private void location() {        //声明LocationClient类        mLocationClient = new LocationClient(getApplicationContext());        //注册监听函数        mLocationClient.registerLocationListener(myListener);        option = new LocationClientOption();        option.setAddrType("all"); //加上这个配置后才可以取到详细地址信息        //设置获取经纬度模式  低功耗        option.setLocationMode(LocationClientOption.LocationMode.Battery_Saving);        //设置返回经纬度坐标类型  百度经纬度坐标        option.setCoorType("bd09ll");        //设置发起定位时间间隔，  设置为0只定位一次  设置大小超过1000有效        option.setScanSpan(300000);        //设置是否使用gps        option.setOpenGps(false);        //设置是否当gps有效时按照15/1次频率输出gps结果        option.setLocationNotify(false);        //设置是否在stop时杀死地图server进程        option.setIgnoreKillProcess(true);        //设置是否收集Crash信息        option.SetIgnoreCacheException(false);        //设置是否需要过滤gps仿真结果        option.setEnableSimulateGps(false);        //将配置好的LocationClientOption对象通过setLocOption传递给LocationClient对象使用        mLocationClient.setLocOption(option);        //获取当前位置信息        option.setIsNeedAddress(true);        //启动定位        mLocationClient.start();        checkLocationPermission();    }    //定位返回信息    public class MyLocationListener implements BDLocationListener {        @Override        public void onReceiveLocation(BDLocation location) {            //此处的BDLocation为定位结果信息类，通过它的各种get方法可获取定位相关的全部结果            //以下只列举部分获取经纬度相关（常用）的结果信息            //更多结果信息获取说明，请参照类参考中BDLocation类中的说明            latitude = location.getLatitude();    //获取纬度信息            longitude = location.getLongitude();    //获取经度信息            float radius = location.getRadius();    //获取定位精度，默认值为0.0f            String coorType = location.getCoorType();            //获取经纬度坐标类型，以LocationClientOption中设置过的坐标类型为准            int errorCode = location.getLocType();//            location.getDerect();            //获取定位类型、定位错误返回码，具体信息可参照类参考中BDLocation类中的说明            //String street = location.getStreet();            address = location.getDistrict();            if (address.equals("") || address == null) {                address = location.getCityCode();                if (address.equals("") || address == null) {                    address = location.getCountry();                }            }            if (getLocationData != null) {                getLocationData.getData(longitude + "", latitude + "", address, location);            }            getHomeData(Double.toString(longitude), Double.toString(latitude), address + "", location);            Log.d("TAG", latitude + "-----------纬度");            Log.d("TAG", longitude + "-----------经度");            Log.d("TAG", errorCode + "-----------错误码");            Log.d("TAG", address + "-----------位置");        }    }    /**     * 提供给Fragment通过getActivity()方法来注册自己的触摸事件的方法     */    public void registerMyTouchListener(MyTouchListener listener) {        myTouchListeners.add(listener);    }    /**     * 提供给Fragment通过getActivity()方法来取消注册自己的触摸事件的方法     */    public void unRegisterMyTouchListener(MyTouchListener listener) {        myTouchListeners.remove(listener);    }    @Override    public boolean onTouchEvent(MotionEvent event) {        for (MyTouchListener listener : myTouchListeners) {            listener.onTouchEvent(event);        }        return super.onTouchEvent(event);    }    public interface MyTouchListener {        /**         * onTOuchEvent的实现         */        boolean onTouchEvent(MotionEvent event);    }    public void setLocation(GetLocationData getLocationData) {        this.getLocationData = getLocationData;    }    private void checkPermission() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            String[] permissions = new String[]{Manifest.permission.ACCESS_COARSE_LOCATION};            int i = ContextCompat.checkSelfPermission(this, permissions[0]);            if (i != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(this, permissions, 200);                return;            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[]            grantResults) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && requestCode == 200) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                //  initFragment();            } else {                Toast.makeText(this, "请在设置中打开权限后继续", Toast.LENGTH_SHORT).show();                Intent intent = new Intent();                intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);                Uri uri = Uri.fromParts("package", getPackageName(), null);                intent.setData(uri);                startActivityForResult(intent, 200);            }        }    }    //判断是否允许定位,如果不允许则弹框提示    public void checkLocationPermission() {        boolean locServiceEnable = PermissionPageUtils.isLocServiceEnable(this);        if (!PermissionPageUtils.isLocServiceEnable(this)) {//检测是否开启定位服务            DlgUtils.showLocServiceDialog(this);        } else {//检测用户是否将当前应用的定位权限拒绝            int checkResult = PermissionPageUtils.checkOp(this, 2, AppOpsManager.OPSTR_FINE_LOCATION);//其中2代表AppOpsManager.OP_GPS，如果要判断悬浮框权限，第二个参数需换成24即AppOpsManager。OP_SYSTEM_ALERT_WINDOW及，第三个参数需要换成AppOpsManager.OPSTR_SYSTEM_ALERT_WINDOW            int checkResult2 = PermissionPageUtils.checkOp(this, 1, AppOpsManager.OPSTR_FINE_LOCATION);            if (AppOpsManagerCompat.MODE_IGNORED == checkResult || AppOpsManagerCompat.MODE_IGNORED == checkResult2) {                DlgUtils.showLocIgnoredDialog(this);            }        }    }    private void getHomeData(String lon1, String lat1, String address1, BDLocation location) {        //获取sharedPreferences对象        SharedPreferences sharedPreferences = getSharedPreferences("location", MODE_PRIVATE);        //获取editor对象        SharedPreferences.Editor editor = sharedPreferences.edit();//获取编辑器        //存储键值对        editor.putString("lon", lon1);        editor.putString("lat", lat1);        editor.putFloat("rudio", location.getRadius());        //提交        editor.commit();//提交修改        //首页请求参数        request = new HomeRequst();        if (user.getString("token", "") == "") {            page = 1;        }        request.setPageNo(page + "");        request.setToken(user.getString("token", ""));        Log.d("ssssss", user.getString("token", ""));        request.setLat(lat1);        request.setLon(lon1);        request.setSimpleAddress(address1);        // if (PermissionPageUtils.isLocServiceEnable(getActivity())) {        //请求首页数据        serviceApi.getHomeOthers(request).subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<HomeOthers>() {                    @Override                    public void accept(HomeOthers homeOthers) throws Exception {                        if (homeOthers.getCode() == 301) {                            Toast.makeText(MainActivity.this, "登录失效", Toast.LENGTH_SHORT).show();                            Intent intent = new Intent(MainActivity.this, SplaActivity.class);                            SharedPreferences.Editor editor = user.edit();                            editor.clear();                            startActivity(intent);                        }                        list = homeOthers.getData().getOnlineUserList();                        HomeAdapter adapter = new HomeAdapter(list, MainActivity.this);                        LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this, LinearLayoutManager.HORIZONTAL, false);                        mRc.setLayoutManager(layout);                        mRc.setAdapter(adapter);                        mRc.addOnScrollListener(new RecyclerView.OnScrollListener() {                            @Override                            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                                super.onScrollStateChanged(recyclerView, newState);                            }                            @Override                            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                                super.onScrolled(recyclerView, dx, dy);                                RecyclerView.LayoutManager layoutManager = mRc.getLayoutManager();                                //判断是当前layoutManager是否为LinearLayoutManager                                // 只有LinearLayoutManager才有查找第一个和最后一个可见view位置的方法                                if (layoutManager instanceof LinearLayoutManager) {                                    LinearLayoutManager linearManager = (LinearLayoutManager) layoutManager;                                    //获取第一个可见view的位置                                    int firstItemPosition = linearManager.findFirstVisibleItemPosition();                                    String s = list.get(firstItemPosition).getPicture();                                    with.load(s).transform(new GlideCircleTransform(MainActivity.this)).into(mDaTou);                                     mHeadName.setText(StringUtils.toUtf8(list.get(firstItemPosition).getNickName()));                                     mHeafDistance.setText(list.get(firstItemPosition).getDistance()+"米");                                }                            }                        });                      //  Toast.makeText(MainActivity.this, "数据" + homeOthers.getMsg(), Toast.LENGTH_SHORT).show();                        // List<HomeOthers.DataBean.OnlineUserListBean> list01 = StringUtil.removeDuplicateWithOrder(HomePageFragment.this.list);                    }                }, new Consumer<Throwable>() {                    @Override                    public void accept(Throwable throwable) throws Exception {                        String s = throwable.getMessage().toString();                    }                });    }    //退出账号方法    public void exitUser() {        //退出账号登录        serviceApi.logOut(exitRequest)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<LogOut>() {                    @Override                    public void accept(final LogOut logOut) throws Exception {                        String msg = logOut.getMsg();                        if (logOut.getCode() == 200) {                            Toast.makeText(MainActivity.this, "您以退出登陆", Toast.LENGTH_SHORT).show();                            user.edit().clear().commit();                            Intent intent = new Intent(MainActivity.this, SplaActivity.class);                            startActivity(intent);                            MainActivity.this.finish();                        } else {                            Toast.makeText(MainActivity.this, "您还没有登陆", Toast.LENGTH_SHORT).show();                        }                    }                }, new Consumer<Throwable>() {                    @Override                    public void accept(Throwable throwable) throws Exception {                    }                });    }    public void setPersonData()    {       mPersonName.setText(user.getString("nickName",""));        with.load(user.getString("picture","")).error(R.drawable.img_default).transform(new GlideCircleTransform(this)).into(mPersonHead);        balance.setText("当前余额:"+user.getString("balance",""));        mPersonTime.setText(user.getString("birthday",""));    }    //微信授权回调接口    public class MyAuthListener implements AuthListener {        @Override        public void onComplete(PlatformType platform_type, Map<String, String> map) {//            Toast.makeText(getActivity(), platform_type + " login onComplete", Toast.LENGTH_SHORT).show();//            Log.i("tsy", "login onComplete:" + map);            code = map.get("code");            if(code!=null)            {                Intent intent = new Intent(MainActivity.this,WeiXinSendActivity.class);                Bundle bundle = new Bundle();                bundle.putString("wxcode",code);                bundle.putString("num",s);                intent.putExtras(bundle);                startActivity(intent);            }        }        @Override        public void onError(PlatformType platform_type, String err_msg) {//            Toast.makeText(getActivity(), platform_type + " login onError:" + err_msg, Toast.LENGTH_SHORT).show();//            Log.i("tsy", "login onError:" + err_msg);        }        @Override        public void onCancel(PlatformType platform_type) {//            Toast.makeText(getActivity(), platform_type + " login onCancel", Toast.LENGTH_SHORT).show();//            Log.i("tsy", "login onCancel");        }    }    //设置提现输入框只能输入两位小数点    public void setInput()    {        importMoney.addTextChangedListener(new TextWatcher() {            @Override            public void onTextChanged(CharSequence s, int start, int before,                                      int count) {                if (s.toString().contains(".")) {                    if (s.length() - 1 - s.toString().indexOf(".") > 2) {                        s = s.toString().subSequence(0,                                s.toString().indexOf(".") + 3);                        importMoney.setText(s);                        importMoney.setSelection(s.length());                    }                }                if (s.toString().trim().substring(0).equals(".")) {                    s = "0" + s;                    importMoney.setText(s);                    importMoney.setSelection(2);                }                if (s.toString().startsWith("0")                        && s.toString().trim().length() > 1) {                    if (!s.toString().substring(1, 2).equals(".")) {                        importMoney.setText(s.subSequence(0, 1));                        importMoney.setSelection(1);                        return;                    }                }            }            @Override            public void beforeTextChanged(CharSequence s, int start, int count,                                          int after) {            }            @Override            public void afterTextChanged(Editable s) {                // TODO Auto-generated method stub            }        });    }}
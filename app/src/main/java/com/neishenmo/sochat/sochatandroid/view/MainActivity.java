package com.neishenmo.sochat.sochatandroid.view;import android.Manifest;import android.animation.Animator;import android.animation.ArgbEvaluator;import android.animation.ValueAnimator;import android.app.AppOpsManager;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.provider.Settings;import android.support.annotation.NonNull;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.animation.OvershootInterpolator;import android.widget.LinearLayout;import android.widget.Toast;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.baidu.mapapi.SDKInitializer;import com.neishenmo.sochat.sochatandroid.R;import com.neishenmo.sochat.sochatandroid.base.BaseActivity;import com.neishenmo.sochat.sochatandroid.dialog.NeutralDialogFragment;import com.neishenmo.sochat.sochatandroid.net.RetrofitHelper;import com.neishenmo.sochat.sochatandroid.net.ServiceApi;import com.neishenmo.sochat.sochatandroid.utils.ControlScrollViewPager;import com.neishenmo.sochat.sochatandroid.utils.PermissionPageUtils;import com.neishenmo.sochat.sochatandroid.view.homepage.HomePageAdapter;import com.neishenmo.sochat.sochatandroid.view.homepage.HomePageFragment;import com.neishenmo.sochat.sochatandroid.view.signin.SplaActivity;import net.lucode.hackware.magicindicator.FragmentContainerHelper;import net.lucode.hackware.magicindicator.MagicIndicator;import net.lucode.hackware.magicindicator.buildins.UIUtil;import net.lucode.hackware.magicindicator.buildins.circlenavigator.CircleNavigator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.CommonNavigator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.CommonNavigatorAdapter;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.IPagerIndicator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.IPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.indicators.LinePagerIndicator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.ColorTransitionPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.CommonPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.SimplePagerTitleView;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.internal.schedulers.ImmediateThinScheduler;import io.reactivex.schedulers.Schedulers;/** * MainActivity入口,进行fragment的加载 */public class MainActivity extends BaseActivity {    private ControlScrollViewPager mViewPager;    private MagicIndicator mMagicIndicator4;    private static final String[] CHANNELS = new String[]{"首页", "消息", "关注", "我"};    private static final Integer[] CHANNELS1 = new Integer[]{R.drawable.my_home,R.drawable.my_message,R.drawable.my_relation,R.drawable.my_per};    private List<String> mDataList = Arrays.asList(CHANNELS);    private List<Integer> mDataList1 = Arrays.asList(CHANNELS1);    private MyLocationListener myListener = new MyLocationListener();    public LocationClient mLocationClient = null;    private LocationClientOption option;    private  LinearLayout homeBg;//    private  ValueAnimator valueAnimator;    private SharedPreferences user;    private int BAIDU_READ_PHONE_STATE = 11;    private double latitude;    private double longitude ;    private  String address ;    /** 保存MyTouchListener接口的列表 */    private ArrayList<MyTouchListener> myTouchListeners = new ArrayList<>();    private  Map<String,String> map = new HashMap<>();    private  GetLocationData getLocationData;    public static String[]permissionsREAD={            Manifest.permission.ACCESS_FINE_LOCATION,             };    public interface GetLocationData{        public void getData(String lon,String lat,String address);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);      // SDKInitializer.initialize(getApplicationContext());        setContentView(R.layout.activity_main);         user = getSharedPreferences("user", 0);        //权限获取        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.CAMERA,Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE}, BAIDU_READ_PHONE_STATE);        SharedPreferences sharedPreferences = this.getSharedPreferences("user",MODE_PRIVATE);//        BaiduMap baiduMap = new BaiduMap();        //声明LocationClient类        mLocationClient = new LocationClient(getApplicationContext());        //注册监听函数        mLocationClient.registerLocationListener(myListener);        option = new LocationClientOption();        option.setAddrType("all"); //加上这个配置后才可以取到详细地址信息        //设置获取经纬度模式  低功耗        option.setLocationMode(LocationClientOption.LocationMode.Battery_Saving);        //设置返回经纬度坐标类型  百度经纬度坐标        option.setCoorType("bd09ll");        //设置发起定位时间间隔，  设置为0只定位一次  设置大小超过1000有效        option.setScanSpan(300000);        //设置是否使用gps        option.setOpenGps(false);        //设置是否当gps有效时按照15/1次频率输出gps结果        option.setLocationNotify(false);        //设置是否在stop时杀死地图server进程        option.setIgnoreKillProcess(true);        //设置是否收集Crash信息        option.SetIgnoreCacheException(false);        //设置是否需要过滤gps仿真结果        option.setEnableSimulateGps(false);        //将配置好的LocationClientOption对象通过setLocOption传递给LocationClient对象使用        mLocationClient.setLocOption(option);        //获取当前位置信息        option.setIsNeedAddress(true);       //获取位置描述信息     //   option.setIsNeedLocationDescribe(true);//        //获取周边//        option.setIsNeedLocationPoiList(true);        if (ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED){            //Toast.makeText(this,"没有获取定位权限",Toast.LENGTH_SHORT).show();            NeutralDialogFragment neutralDialogFragment = new NeutralDialogFragment();            neutralDialogFragment.show("", "使用内什么App需要获取您的位置哦", "确定~", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    // ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, BAIDU_READ_PHONE_STATE);                    PermissionPageUtils pageUtils = new PermissionPageUtils(MainActivity.this);                    pageUtils.jumpPermissionPage();                }            }, getFragmentManager());            }                mLocationClient.start();        initView();    }    private void initView() {        mViewPager = (ControlScrollViewPager) findViewById(R.id.viewPager);        mMagicIndicator4 = (MagicIndicator) findViewById(R.id.magic_indicator4);        mViewPager.setAdapter(new HomePageAdapter(getSupportFragmentManager(), mDataList));        homeBg = findViewById(R.id.home_layout);        initMagicIndicator4(mDataList);        SharedPreferences sharedPreferences = getSharedPreferences("user",MODE_PRIVATE);      //  Log.d("TAG",sharedPreferences.getString("token","")+"token"+"-----------------");    }    private void initMagicIndicator4(final List<String> list) {        CommonNavigator commonNavigator = new CommonNavigator(this);        CommonPagerTitleView commonPagerTitleView = new CommonPagerTitleView(this);        commonNavigator.setAdapter(new CommonNavigatorAdapter() {            @Override            public int getCount() {                return list.size();            }            @Override            public IPagerTitleView getTitleView(Context context, final int index) {                CommonPagerTitleView commonPagerTitleView = new CommonPagerTitleView(MainActivity.this);                SimplePagerTitleView simplePagerTitleView = new ColorTransitionPagerTitleView(context);                simplePagerTitleView.setNormalColor(Color.GRAY);                simplePagerTitleView.setSelectedColor(Color.WHITE);                simplePagerTitleView.setTextSize(20.0f);                simplePagerTitleView.setText(list.get(index));            //    simplePagerTitleView.setBackgroundResource(list.get(index));                simplePagerTitleView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        mViewPager.setCurrentItem(index);                    }                });                return simplePagerTitleView;            }            @Override            public IPagerIndicator getIndicator(Context context) {                LinePagerIndicator linePagerIndicator = new LinePagerIndicator(context);                linePagerIndicator.setMode(LinePagerIndicator.MODE_EXACTLY);                linePagerIndicator.setLineWidth(UIUtil.dip2px(context, 15));                linePagerIndicator.setColors(Color.WHITE);                return linePagerIndicator;            }        });        mMagicIndicator4.setNavigator(commonNavigator);        LinearLayout titleContainer = commonNavigator.getTitleContainer(); // must after setNavigator        titleContainer.setShowDividers(LinearLayout.SHOW_DIVIDER_MIDDLE);        titleContainer.setDividerDrawable(new ColorDrawable() {            @Override            public int getIntrinsicWidth() {                return UIUtil.dip2px(getApplicationContext(), 20);            }        });        final FragmentContainerHelper fragmentContainerHelper = new FragmentContainerHelper(mMagicIndicator4);        fragmentContainerHelper.setInterpolator(new OvershootInterpolator(2.0f));        fragmentContainerHelper.setDuration(300);        mViewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {            @Override            public void onPageSelected(int position) {                fragmentContainerHelper.handlePageSelected(position);            }        });       mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {           @Override           public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {           }           @Override           public void onPageSelected(int position) {           if(position!=0)           {               //valueAnimator.end();               homeBg.setBackgroundResource(R.color.bg);               if(user.getString("token","")==""||user.getString("token","")==null)               {                   Intent intent = new Intent(MainActivity.this, SplaActivity.class);                   startActivity(intent);               }           }           }           @Override           public void onPageScrollStateChanged(int state) {           }       });    }    //定位返回信息    //定位返回信息    public class MyLocationListener implements BDLocationListener {        @Override        public void onReceiveLocation(BDLocation location) {            //此处的BDLocation为定位结果信息类，通过它的各种get方法可获取定位相关的全部结果            //以下只列举部分获取经纬度相关（常用）的结果信息            //更多结果信息获取说明，请参照类参考中BDLocation类中的说明             latitude = location.getLatitude();    //获取纬度信息             longitude = location.getLongitude();    //获取经度信息            float radius = location.getRadius();    //获取定位精度，默认值为0.0f            String coorType = location.getCoorType();            //获取经纬度坐标类型，以LocationClientOption中设置过的坐标类型为准            int errorCode = location.getLocType();//            location.getDerect();            //获取定位类型、定位错误返回码，具体信息可参照类参考中BDLocation类中的说明            //String street = location.getStreet();             address = location.getDistrict();             if(address.equals("")||address==null)             {                 address = location.getCityCode();                 if(address.equals("")||address==null)                 {                     address = location.getCountry();                 }             }//            HomePageFragment homePageFragment = new HomePageFragment();//            Bundle bundle = new Bundle();//            bundle.putString("lon",longitude+"");//            bundle.putString("lat",latitude+"");//            bundle.putString("address",address+"");//            if (getLocationData!=null) {                getLocationData.getData(longitude+"",latitude+"",address);            }            Log.d("TAG",latitude+"-----------纬度");            Log.d("TAG",longitude+"-----------经度");            Log.d("TAG",errorCode+"-----------错误码");            Log.d("TAG",address+"-----------位置");//            //来访数据请求//            PositionRequst request = new PositionRequst(sharedPreferences.getString("token",""),//                    String.valueOf(longitude),String.valueOf(longitude),street);//            ServiceApi api = RetrofitHelper.getServiceApi();//            api.setPisition(request)//                    .subscribeOn(Schedulers.io())//                    .observeOn(AndroidSchedulers.mainThread())//                    .subscribe(new Consumer<PisitionBean>() {@Override//                    public void accept(PisitionBean pisitionBean) throws Exception {//                        PisitionBean bean = pisitionBean;//                        Log.d("TAG",bean.getMsg());//                    }//                    });        }    }    /** 提供给Fragment通过getActivity()方法来注册自己的触摸事件的方法 */    public void registerMyTouchListener(MyTouchListener listener) {        myTouchListeners.add(listener);    }    /** 提供给Fragment通过getActivity()方法来取消注册自己的触摸事件的方法 */    public void unRegisterMyTouchListener(MyTouchListener listener) {        myTouchListeners.remove( listener );    }    @Override    public boolean onTouchEvent(MotionEvent event) {        for (MyTouchListener listener : myTouchListeners) {            listener.onTouchEvent(event);        }        return super.onTouchEvent(event);    }//    @Override//    public boolean dispatchTouchEvent(MotionEvent ev) {//        for (MyTouchListener listener : myTouchListeners) {//            listener.onTouchEvent(ev);//        }//        return super.dispatchTouchEvent(ev);//    }    public interface MyTouchListener {        /** onTOuchEvent的实现 */        boolean onTouchEvent(MotionEvent event);    }//    //颜色渐变动画//    public static void animationColorGradient(int beforeColor, int afterColor) {//         valueAnimator = ValueAnimator.ofObject(new ArgbEvaluator(), new Object[]{Integer.valueOf(beforeColor), Integer.valueOf(afterColor)}).setDuration(500L);//         valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {//            public void onAnimationUpdate(ValueAnimator animation) {//                int i = ((Integer) animation.getAnimatedValue()).intValue();//                homeBg.setBackgroundColor(i);//            }//        });//        valueAnimator.start();//        valueAnimator.addListener(new Animator.AnimatorListener() {//            @Override//            public void onAnimationStart(Animator animator) {////            }////            @Override//            public void onAnimationEnd(Animator animator) {//                homeBg.setBackgroundResource(R.color.bg);//            }////            @Override//            public void onAnimationCancel(Animator animator) {////            }////            @Override//            public void onAnimationRepeat(Animator animator) {////            }//        });//    }    public void setLocation(GetLocationData getLocationData){        this.getLocationData = getLocationData;    }    private void checkPermission() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            String[] permissions = new String[]{Manifest.permission.ACCESS_COARSE_LOCATION};            int i = ContextCompat.checkSelfPermission(this, permissions[0]);            if (i != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(this, permissions, 200);                return;            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[]            grantResults) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && requestCode == 200) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {              //  initFragment();            } else {                Toast.makeText(this, "请在设置中打开权限后继续", Toast.LENGTH_SHORT).show();                Intent intent = new Intent();                intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);                Uri uri = Uri.fromParts("package", getPackageName(), null);                intent.setData(uri);                startActivityForResult(intent, 200);            }        }    }}
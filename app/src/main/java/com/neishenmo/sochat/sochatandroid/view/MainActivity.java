package com.neishenmo.sochat.sochatandroid.view;import android.Manifest;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.View;import android.view.animation.OvershootInterpolator;import android.widget.LinearLayout;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.neishenmo.sochat.sochatandroid.R;import com.neishenmo.sochat.sochatandroid.base.BaseActivity;import com.neishenmo.sochat.sochatandroid.view.homepage.HomePageAdapter;import net.lucode.hackware.magicindicator.FragmentContainerHelper;import net.lucode.hackware.magicindicator.MagicIndicator;import net.lucode.hackware.magicindicator.buildins.UIUtil;import net.lucode.hackware.magicindicator.buildins.circlenavigator.CircleNavigator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.CommonNavigator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.CommonNavigatorAdapter;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.IPagerIndicator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.IPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.indicators.LinePagerIndicator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.ColorTransitionPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.SimplePagerTitleView;import java.util.Arrays;import java.util.List;/** * MainActivity入口,进行fragment的加载 */public class MainActivity extends BaseActivity {    private ViewPager mViewPager;    private MagicIndicator mMagicIndicator4;    private static final String[] CHANNELS = new String[]{"首页", "消息", "关注", "我"};    private List<String> mDataList = Arrays.asList(CHANNELS);    private MyLocationListener myListener = new MyLocationListener();    public LocationClient mLocationClient = null;    private LocationClientOption option;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        //权限获取        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.CAMERA,Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE}, 1);        SharedPreferences sharedPreferences = this.getSharedPreferences("user",MODE_PRIVATE);        //声明LocationClient类        mLocationClient = new LocationClient(getApplicationContext());        //注册监听函数        mLocationClient.registerLocationListener(myListener);        option = new LocationClientOption();        //设置获取经纬度模式  低功耗        option.setLocationMode(LocationClientOption.LocationMode.Battery_Saving);        //设置返回经纬度坐标类型  百度经纬度坐标        option.setCoorType("bd09ll");        //设置发起定位时间间隔，  设置为0只定位一次  设置大小超过1000有效        option.setScanSpan(300000);        //设置是否使用gps        option.setOpenGps(false);        //设置是否当gps有效时按照15/1次频率输出gps结果        option.setLocationNotify(false);        //设置是否在stop时杀死地图server进程        option.setIgnoreKillProcess(true);        //设置是否收集Crash信息        option.SetIgnoreCacheException(false);        //设置是否需要过滤gps仿真结果        option.setEnableSimulateGps(false);        //将配置好的LocationClientOption对象通过setLocOption传递给LocationClient对象使用        mLocationClient.setLocOption(option);        //发起定位        mLocationClient.start();        initView();    }    private void initView() {        mViewPager = (ViewPager) findViewById(R.id.viewPager);        mMagicIndicator4 = (MagicIndicator) findViewById(R.id.magic_indicator4);        mViewPager.setAdapter(new HomePageAdapter(getSupportFragmentManager(), mDataList));        initMagicIndicator4(mDataList);        SharedPreferences sharedPreferences = getSharedPreferences("user",MODE_PRIVATE);        Log.d("TAG",sharedPreferences.getString("token","")+"token"+"-----------------");    }    private void initMagicIndicator4(final List<String> list) {        CommonNavigator commonNavigator = new CommonNavigator(this);        commonNavigator.setAdapter(new CommonNavigatorAdapter() {            @Override            public int getCount() {                return list.size();            }            @Override            public IPagerTitleView getTitleView(Context context, final int index) {                SimplePagerTitleView simplePagerTitleView = new ColorTransitionPagerTitleView(context);                simplePagerTitleView.setNormalColor(Color.GRAY);                simplePagerTitleView.setSelectedColor(Color.WHITE);                simplePagerTitleView.setTextSize(20.0f);                simplePagerTitleView.setText(list.get(index));                simplePagerTitleView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        mViewPager.setCurrentItem(index);                    }                });                return simplePagerTitleView;            }            @Override            public IPagerIndicator getIndicator(Context context) {                LinePagerIndicator linePagerIndicator = new LinePagerIndicator(context);                linePagerIndicator.setMode(LinePagerIndicator.MODE_EXACTLY);                linePagerIndicator.setLineWidth(UIUtil.dip2px(context, 15));                linePagerIndicator.setColors(Color.WHITE);                return linePagerIndicator;            }        });        mMagicIndicator4.setNavigator(commonNavigator);        LinearLayout titleContainer = commonNavigator.getTitleContainer(); // must after setNavigator        titleContainer.setShowDividers(LinearLayout.SHOW_DIVIDER_MIDDLE);        titleContainer.setDividerDrawable(new ColorDrawable() {            @Override            public int getIntrinsicWidth() {                return UIUtil.dip2px(getApplicationContext(), 20);            }        });        final FragmentContainerHelper fragmentContainerHelper = new FragmentContainerHelper(mMagicIndicator4);        fragmentContainerHelper.setInterpolator(new OvershootInterpolator(2.0f));        fragmentContainerHelper.setDuration(300);        mViewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {            @Override            public void onPageSelected(int position) {                fragmentContainerHelper.handlePageSelected(position);            }        });    }    //定位返回信息    public class MyLocationListener implements BDLocationListener {        @Override        public void onReceiveLocation(BDLocation location) {            //此处的BDLocation为定位结果信息类，通过它的各种get方法可获取定位相关的全部结果            //以下只列举部分获取经纬度相关（常用）的结果信息            //更多结果信息获取说明，请参照类参考中BDLocation类中的说明            double latitude = location.getLatitude();    //获取纬度信息            double longitude = location.getLongitude();    //获取经度信息            float radius = location.getRadius();    //获取定位精度，默认值为0.0f            String coorType = location.getCoorType();            //获取经纬度坐标类型，以LocationClientOption中设置过的坐标类型为准            int errorCode = location.getLocType();            //获取定位类型、定位错误返回码，具体信息可参照类参考中BDLocation类中的说明            Log.d("TAG",latitude+"纬度-----------");            Log.d("TAG",longitude+"经度-----------");            Log.d("TAG",radius+"定位精度-----------");            Log.d("TAG",coorType+"经纬度坐标类型-----------");            Log.d("TAG",errorCode+"参照类-----------");        }    }}
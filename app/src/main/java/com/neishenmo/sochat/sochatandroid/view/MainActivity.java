package com.neishenmo.sochat.sochatandroid.view;import android.Manifest;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.View;import android.view.animation.OvershootInterpolator;import android.widget.LinearLayout;import com.neishenmo.sochat.sochatandroid.R;import com.neishenmo.sochat.sochatandroid.base.BaseActivity;import com.neishenmo.sochat.sochatandroid.view.homepage.HomePageAdapter;import net.lucode.hackware.magicindicator.FragmentContainerHelper;import net.lucode.hackware.magicindicator.MagicIndicator;import net.lucode.hackware.magicindicator.buildins.UIUtil;import net.lucode.hackware.magicindicator.buildins.circlenavigator.CircleNavigator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.CommonNavigator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.CommonNavigatorAdapter;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.IPagerIndicator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.abs.IPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.indicators.LinePagerIndicator;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.ColorTransitionPagerTitleView;import net.lucode.hackware.magicindicator.buildins.commonnavigator.titles.SimplePagerTitleView;import java.util.Arrays;import java.util.List;/** * MainActivity入口,进行fragment的加载 */public class MainActivity extends BaseActivity {    private ViewPager mViewPager;    private MagicIndicator mMagicIndicator4;    private static final String[] CHANNELS = new String[]{"首页", "消息", "关注", "我"};    private List<String> mDataList = Arrays.asList(CHANNELS);    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.CAMERA}, 1);        initView();    }    private void initView() {        mViewPager = (ViewPager) findViewById(R.id.viewPager);        mMagicIndicator4 = (MagicIndicator) findViewById(R.id.magic_indicator4);        mViewPager.setAdapter(new HomePageAdapter(getSupportFragmentManager(), mDataList));        initMagicIndicator4(mDataList);        SharedPreferences sharedPreferences = getSharedPreferences("user",MODE_PRIVATE);        Log.d("TAG",sharedPreferences.getString("token","")+"token"+"-----------------");    }    private void initMagicIndicator4(final List<String> list) {        CommonNavigator commonNavigator = new CommonNavigator(this);        commonNavigator.setAdapter(new CommonNavigatorAdapter() {            @Override            public int getCount() {                return list.size();            }            @Override            public IPagerTitleView getTitleView(Context context, final int index) {                SimplePagerTitleView simplePagerTitleView = new ColorTransitionPagerTitleView(context);                simplePagerTitleView.setNormalColor(Color.GRAY);                simplePagerTitleView.setSelectedColor(Color.WHITE);                simplePagerTitleView.setTextSize(20.0f);                simplePagerTitleView.setText(list.get(index));                simplePagerTitleView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        mViewPager.setCurrentItem(index);                    }                });                return simplePagerTitleView;            }            @Override            public IPagerIndicator getIndicator(Context context) {                LinePagerIndicator linePagerIndicator = new LinePagerIndicator(context);                linePagerIndicator.setMode(LinePagerIndicator.MODE_EXACTLY);                linePagerIndicator.setLineWidth(UIUtil.dip2px(context, 15));                linePagerIndicator.setColors(Color.WHITE);                return linePagerIndicator;            }        });        mMagicIndicator4.setNavigator(commonNavigator);        LinearLayout titleContainer = commonNavigator.getTitleContainer(); // must after setNavigator        titleContainer.setShowDividers(LinearLayout.SHOW_DIVIDER_MIDDLE);        titleContainer.setDividerDrawable(new ColorDrawable() {            @Override            public int getIntrinsicWidth() {                return UIUtil.dip2px(getApplicationContext(), 20);            }        });        final FragmentContainerHelper fragmentContainerHelper = new FragmentContainerHelper(mMagicIndicator4);        fragmentContainerHelper.setInterpolator(new OvershootInterpolator(2.0f));        fragmentContainerHelper.setDuration(300);        mViewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {            @Override            public void onPageSelected(int position) {                fragmentContainerHelper.handlePageSelected(position);            }        });    }}